apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: ${APPLICATION_NAME}
    app-type: elixir
    role: ${APP_ROL_MONGO}
  name: ${APPLICATION_NAME}
  namespace: ${NAMESPACE}
spec:
  replicas: ${REPLICAS}
  selector:
    matchLabels:
      app: ${APPLICATION_NAME}
  template:
    metadata:
      creationTimestamp: null
      labels:
        app: ${APPLICATION_NAME}
        app-type: elixir
        role: ${APP_ROL_MONGO}
    spec:
      containers:
        - name: ${APPLICATION_NAME}
          image: ${REGISTRY_OPENSHIFT}/${NAMESPACE}/${NAME_IMAGE}:${VERSION_IMAGE}
          imagePullPolicy: Always
          env:
            - name: DB_USERNAME
              valueFrom:
                secretKeyRef:
                  name: ${MONGO_SECRET_NAME}
                  key: user
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: ${MONGO_SECRET_NAME}
                  key: password
            - name: DB_HOST
              valueFrom:
                secretKeyRef:
                  name: ${MONGO_SECRET_NAME}
                  key: hostname
            - name: DB_PORT
              valueFrom:
                secretKeyRef:
                  name: ${MONGO_SECRET_NAME}
                  key: port
            - name: DB_NAME
              valueFrom:
                secretKeyRef:
                  name: ${MONGO_SECRET_NAME}
                  key: database
          resources:
            limits:
              cpu: ${RESOURSE_LIMIT_CPU}
              memory: ${RESOURSE_LIMIT_MEMORY}
            requests:
              cpu: ${RESOURSE_REQUESTS_CPU}
              memory: ${RESOURSE_REQUESTS_MEMORY}
          ports:
            - containerPort: ${CONTAINER_PORT}
            - containerPort: ${METRIC_PORT}
          readinessProbe:
            tcpSocket:
              port: ${CONTAINER_PORT}
            initialDelaySeconds: ${READINESS-INIT-DELAY}
            periodSeconds: 10
          livenessProbe:
            tcpSocket:
              port: ${CONTAINER_PORT}
            initialDelaySeconds: ${LIVENESS-INIT-DELAY}
            periodSeconds: 20
          securityContext:
            allowPrivilegeEscalation: false
            runAsNonRoot: true
          volumeMounts:
            - name: vault-cred
              mountPath: '/vault/config/agent-creds'
            - name: vault-config
              mountPath: '/vault/config/agent-config.hcl'
              subPath: 'agent-config.hcl'
            - name: vault-templates
              mountPath: '/vault/config/templates'
            - name: ca-percona
              mountPath: '/percona/priv/ca.pem'
              subPath: 'ca.crt'
            - name: client-certs-percona
              mountPath: '/percona/priv/public.pem'
              subPath: 'tls.crt'
            - name: client-certs-percona
              mountPath: '/percona/priv/privatekey.pem'
              subPath: 'tls.key'
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
      serviceAccount: ${APPLICATION_NAME}-sa
      serviceAccountName: ${APPLICATION_NAME}-sa
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: vault-templates
          configMap:
            name: ${APPLICATION_NAME}-vault-templates
            defaultMode: 420
        - name: vault-config
          configMap:
            name: ${APPLICATION_NAME}-vault-config
            defaultMode: 420
        - name: vault-cred
          secret:
            secretName: ${APPLICATION_NAME}-vault-cred
            defaultMode: 420
        - name: ca-percona
          secret:
            secretName: ${PERCONA_CA_SECRET}
            defaultMode: 420
        - name: client-certs-percona
          secret:
            secretName: ${PERCONA_CLIENT_SECRET}
            defaultMode: 420
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
