<testExecutions version="1"><file path="c:/elixir_bcp/AW1333002_Pocket_Elixir_MR_pocket_new/AW1333002_Pocket_Elixir_MR/pocket_information/test/adapters/cache/cache_impl_test.exs"><testCase name="Elixir.PocketInformation.Test.Adapters.Cache.CacheImplTest | test operations on the cache  should consult the cache without finding value " duration="0"></testCase><testCase name="Elixir.PocketInformation.Test.Adapters.Cache.CacheImplTest | test operations on the cache  should insert a value in cache" duration="0"></testCase><testCase name="Elixir.PocketInformation.Test.Adapters.Cache.CacheImplTest | test creation of ets cache should be created" duration="0"></testCase></file><file path="c:/elixir_bcp/AW1333002_Pocket_Elixir_MR_pocket_new/AW1333002_Pocket_Elixir_MR/pocket_information/test/adapters/repositories/category_repository_impl_test.exs"><testCase name="Elixir.PocketInformation.Test.Adapters.Repositories.CategoryRepositoryImplTest | test get cached category  Category exists in cache" duration="79"></testCase><testCase name="Elixir.PocketInformation.Test.Adapters.Repositories.CategoryRepositoryImplTest | test get category in MongoDB should return the value of the reference of the searched code" duration="239"></testCase><testCase name="Elixir.PocketInformation.Test.Adapters.Repositories.CategoryRepositoryImplTest | test get category in MongoDB should return an error because the reference for the code does not exist" duration="246"></testCase><testCase name="Elixir.PocketInformation.Test.Adapters.Repositories.CategoryRepositoryImplTest | test get category in MongoDB should return an error because the references does not exist" duration="928"></testCase></file><file path="c:/elixir_bcp/AW1333002_Pocket_Elixir_MR_pocket_new/AW1333002_Pocket_Elixir_MR/pocket_information/test/adapters/repositories/pocket_repository_impl_test.exs"><testCase name="Elixir.PocketInformation.Test.Adapters.Repositories.PocketRepositoryImplTest | test get_pocket should return an error if any pocket if retrieved from mongo" duration="223"></testCase><testCase name="Elixir.PocketInformation.Test.Adapters.Repositories.PocketRepositoryImplTest | test get_pocket should return an error if an error ocurred homologating the pocket state" duration="229"></testCase><testCase name="Elixir.PocketInformation.Test.Adapters.Repositories.PocketRepositoryImplTest | test get_pocket should return an error if an error ocurred building the pocket id" duration="253"></testCase><testCase name="Elixir.PocketInformation.Test.Adapters.Repositories.PocketRepositoryImplTest | test get_pocket should return an error if an error ocurred converting the start date" duration="265"></testCase><testCase name="Elixir.PocketInformation.Test.Adapters.Repositories.PocketRepositoryImplTest | test get_pocket should return a valid pocket if it was not possible to homologate the frequency field" duration="206"></testCase><testCase name="Elixir.PocketInformation.Test.Adapters.Repositories.PocketRepositoryImplTest | test get_pocket should return a valid pocket" duration="233"></testCase></file><file path="c:/elixir_bcp/AW1333002_Pocket_Elixir_MR_pocket_new/AW1333002_Pocket_Elixir_MR/pocket_information/test/domain/use_cases/pocket/get_pocket_use_case_test.exs"><testCase name="Elixir.PocketInformation.Test.Domain.UseCases.Pocket.GetPocketUseCaseTest | test handle_use_case should return a {:error, reason} tuple if something bad happens" duration="0"></testCase><testCase name="Elixir.PocketInformation.Test.Domain.UseCases.Pocket.GetPocketUseCaseTest | test handle_use_case should return a pocket if" duration="0"></testCase></file><file path="c:/elixir_bcp/AW1333002_Pocket_Elixir_MR_pocket_new/AW1333002_Pocket_Elixir_MR/pocket_information/test/entry_points/http/rest/api_rest_controller_test.exs"><testCase name="Elixir.PocketInformation.Test.EntryPoints.Http.Rest.ApiRestControllerTest | test /v1/operations/product-specific/deposits/accounts/pockets/retrieve should return 400 status code bad request mising pocket field" duration="0"></testCase><testCase name="Elixir.PocketInformation.Test.EntryPoints.Http.Rest.ApiRestControllerTest | test /v1/operations/product-specific/deposits/accounts/pockets/retrieve should return 400 status code bad request pocket number maxLength exceeded" duration="0"></testCase><testCase name="Elixir.PocketInformation.Test.EntryPoints.Http.Rest.ApiRestControllerTest | test /v1/operations/product-specific/deposits/accounts/pockets/retrieve should return success server 200 status and return the pocket information" duration="0"></testCase><testCase name="Elixir.PocketInformation.Test.EntryPoints.Http.Rest.ApiRestControllerTest | test /v1/operations/product-specific/deposits/accounts/pockets/retrieve should return 400 status code bad request account is not savings account  --" duration="62"></testCase><testCase name="Elixir.PocketInformation.Test.EntryPoints.Http.Rest.ApiRestControllerTest | test /v1/operations/product-specific/deposits/accounts/pockets/retrieve should return 400 status code bad request pocket prefix is not equal to account number" duration="1"></testCase><testCase name="Elixir.PocketInformation.Test.EntryPoints.Http.Rest.ApiRestControllerTest | test /v1/operations/product-specific/deposits/accounts/pockets/retrieve should return success server 404 status if the pocket is not found" duration="0"></testCase><testCase name="Elixir.PocketInformation.Test.EntryPoints.Http.Rest.ApiRestControllerTest | test /v1/operations/product-specific/deposits/accounts/pockets/retrieve should return success server 500 status if an error ocurred processing the request" duration="0"></testCase><testCase name="Elixir.PocketInformation.Test.EntryPoints.Http.Rest.ApiRestControllerTest | test /v1/operations/product-specific/deposits/accounts/pockets/retrieve should return 400 status code bad request account number maxLength exceeded" duration="1"></testCase><testCase name="Elixir.PocketInformation.Test.EntryPoints.Http.Rest.ApiRestControllerTest | test /v1/operations/product-specific/deposits/accounts/pockets/retrieve should not fail even when the message-id is not sent" duration="15"></testCase><testCase name="Elixir.PocketInformation.Test.EntryPoints.Http.Rest.ApiRestControllerTest | test /v1/operations/product-specific/deposits/accounts/pockets/retrieve should return 400 status code bad request" duration="0"></testCase><testCase name="Elixir.PocketInformation.Test.EntryPoints.Http.Rest.ApiRestControllerTest | test /v1/operations/product-specific/deposits/accounts/pockets/retrieve should return success server 404 status if the resource api is not found" duration="88"></testCase></file><file path="c:/elixir_bcp/AW1333002_Pocket_Elixir_MR_pocket_new/AW1333002_Pocket_Elixir_MR/pocket_information/test/utils/http/cowboy_utils_test.exs"><testCase name="Elixir.PocketInformation.Test.Utils.HTTP.CowboyUtilsTest | test build_child_spec/2 build a child spec for test env containing a EMPTY configuration for cowboy" duration="0"></testCase><testCase name="Elixir.PocketInformation.Test.Utils.HTTP.CowboyUtilsTest | test build_child_spec/2 build a child spec for dev env containing a http configuration for cowboy" duration="0"></testCase><testCase name="Elixir.PocketInformation.Test.Utils.HTTP.CowboyUtilsTest | test build_child_spec/2 build a child spec for prod env containing a mtls configuration for cowboy" duration="0"></testCase></file><file path="c:/elixir_bcp/AW1333002_Pocket_Elixir_MR_pocket_new/AW1333002_Pocket_Elixir_MR/pocket_information/test/utils/http/null_field_remover_test.exs"><testCase name="Elixir.PocketInformation.Utils.HTTP.NullFieldRemoverTest | test remove_fields/ should keep closeDay from date struct" duration="0"></testCase><testCase name="Elixir.PocketInformation.Utils.HTTP.NullFieldRemoverTest | test remove_fields/ should keep frequency from date struct" duration="0"></testCase><testCase name="Elixir.PocketInformation.Utils.HTTP.NullFieldRemoverTest | test remove_fields/ should remove frequency, startDateTransfer and endDateTransfer from scheduledTransfer" duration="0"></testCase><testCase name="Elixir.PocketInformation.Utils.HTTP.NullFieldRemoverTest | test remove_fields/ should keep endDate from date struct" duration="0"></testCase><testCase name="Elixir.PocketInformation.Utils.HTTP.NullFieldRemoverTest | test remove_fields/ should remove closeDate from pocket struct" duration="0"></testCase><testCase name="Elixir.PocketInformation.Utils.HTTP.NullFieldRemoverTest | test remove_fields/ should keep startDate from date struct" duration="0"></testCase><testCase name="Elixir.PocketInformation.Utils.HTTP.NullFieldRemoverTest | test remove_fields/ should keep savingsEndDay from date struct" duration="0"></testCase><testCase name="Elixir.PocketInformation.Utils.HTTP.NullFieldRemoverTest | test remove_fields/ should remove savingsEndDay from date struct" duration="0"></testCase></file><file path="c:/elixir_bcp/AW1333002_Pocket_Elixir_MR_pocket_new/AW1333002_Pocket_Elixir_MR/pocket_information/test/utils/http/plug_header_traceability_test.exs"><testCase name="Elixir.PocketInformation.Test.Utils.HTTP.PlugHeaderTraceabilityTest | test call/2 should add message_id value in the header connection when message_id value come empty" duration="8"></testCase><testCase name="Elixir.PocketInformation.Test.Utils.HTTP.PlugHeaderTraceabilityTest | test call/2 should return the header connection without modification" duration="9"></testCase><testCase name="Elixir.PocketInformation.Test.Utils.HTTP.PlugHeaderTraceabilityTest | test call/2 should add message_id in the header connection" duration="0"></testCase></file><file path="c:/elixir_bcp/AW1333002_Pocket_Elixir_MR_pocket_new/AW1333002_Pocket_Elixir_MR/pocket_information/test/utils/http/plug_trx_logger_test.exs"><testCase name="Elixir.PocketInformation.Test.Utils.HTTP.PlugTrxLoggerTest | test call/2 should not fail even when the payload is invalid" duration="18"></testCase><testCase name="Elixir.PocketInformation.Test.Utils.HTTP.PlugTrxLoggerTest | test call/2 take information from the request and response to produce a log message" duration="2"></testCase><testCase name="Elixir.PocketInformation.Test.Utils.HTTP.PlugTrxLoggerTest | test call/2 register a callback function before sending response" duration="27"></testCase></file></testExecutions>